stages:
  - prepare
  - build
  - test
  - verify
  - deploy

# Enable some gitlab templates for nice integrations
include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

dependency_scanning:
  stage: verify
  needs: [build]

license_scanning:
  stage: verify
  needs: [build]

sast:
  stage: verify
  tags: [xirion]
  needs: [build]

variables:
  DIND_GO_IMAGE: "$CI_REGISTRY_IMAGE/build-image"
  VK_IMAGE: "$CI_REGISTRY_IMAGE/apatelet"
  CP_IMAGE: "$CI_REGISTRY_IMAGE/controlplane"
  GOPATH: "$CI_PROJECT_DIR/.go"
  DS_EXCLUDED_PATHS: ".go" # Exclude the caching dir from scans
  CP_K8S_CONFIG: "$CI_PROJECT_DIR/pkg/cluster/kind/kind"

default:
  image: $DIND_GO_IMAGE
  before_script:
    - mkdir -p .go
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .go/pkg/mod/

prepare-build-image:
  stage: prepare
  image: docker:latest
  only:
    changes:
      - ci/build-image/Dockerfile
      - .gitlab-ci.yml
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - cd ./ci/build-image
  script:
    - docker build --pull -t "$DIND_GO_IMAGE" .
    - docker push "$DIND_GO_IMAGE"

build:
  stage: build
  before_script:
    - go mod download
  script:
    - go install ./...

static-analysis:
  stage: verify
  needs: [build]
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  allow_failure: true
  before_script:
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
  script:
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

test:
  stage: test
  needs: [build]
  services:
    - docker:dind
  coverage: /^total:.+\)\s+(\d+.?\d*)%$/
  before_script:
    - go mod download
  script:
    - go test -v -covermode=atomic -coverprofile=cover.cov ./... 2>&1 | go-junit-report > report.xml
    - go tool cover -func=cover.cov
  artifacts:
    reports:
      junit: report.xml
    paths:
      - cover.cov

race:
  stage: test
  needs: [build]
  image: golang:1.14
  before_script:
    - go mod download
  script: # Test for race conditions in small tests as race condition testing is slow
    - go test -race -short ./...

deploy-apatelet:
  stage: deploy
  image: docker:latest
  only: [master]
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f services/apatelet/Dockerfile -t $VK_IMAGE .
    - docker push "$VK_IMAGE"

deploy-cp:
  stage: deploy
  image: docker:latest
  only: [master]
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f services/controlplane/Dockerfile -t $CP_IMAGE .
    - docker push "$CP_IMAGE"