// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: apatelet/scenario.proto

package apatelet

import (
	context "context"
	scenario "github.com/atlarge-research/opendc-emulate-kubernetes/api/scenario"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The top level object which defines how the different Apatelet will emulate certain deployments
type ApateletScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A scenario consists of multiple tasks that will be scheduled on a Apatelet
	Task []*Task `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
	// A unix time stamp indicating when this scenario will start
	// Should be enough time such that every Apatelet has received the startScenario request
	// The task timestamps will be relative to this time
	StartTime int32 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *ApateletScenario) Reset() {
	*x = ApateletScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApateletScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApateletScenario) ProtoMessage() {}

func (x *ApateletScenario) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApateletScenario.ProtoReflect.Descriptor instead.
func (*ApateletScenario) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{0}
}

func (x *ApateletScenario) GetTask() []*Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ApateletScenario) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the task, can be used later to revert it
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether to revert the task with the given name
	RevertTask bool `protobuf:"varint,2,opt,name=revert_task,json=revertTask,proto3" json:"revert_task,omitempty"`
	// The timestamp on which this task will be executed
	// Is in milliseconds since the scenario has started
	Timestamp int32 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The UUID of the nodes on which this task will be executed
	// Will be ignored when revert_task is true
	NodeSet []string `protobuf:"bytes,4,rep,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	// The event belonging to this task
	// Will be ignored when revert_task is true
	//
	// Types that are assignable to Event:
	//	*Task_NodeEvent
	//	*Task_PodEvent
	Event isTask_Event `protobuf_oneof:"event"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetRevertTask() bool {
	if x != nil {
		return x.RevertTask
	}
	return false
}

func (x *Task) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Task) GetNodeSet() []string {
	if x != nil {
		return x.NodeSet
	}
	return nil
}

func (m *Task) GetEvent() isTask_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Task) GetNodeEvent() *NodeEvent {
	if x, ok := x.GetEvent().(*Task_NodeEvent); ok {
		return x.NodeEvent
	}
	return nil
}

func (x *Task) GetPodEvent() *PodEvent {
	if x, ok := x.GetEvent().(*Task_PodEvent); ok {
		return x.PodEvent
	}
	return nil
}

type isTask_Event interface {
	isTask_Event()
}

type Task_NodeEvent struct {
	NodeEvent *NodeEvent `protobuf:"bytes,5,opt,name=node_event,json=nodeEvent,proto3,oneof"`
}

type Task_PodEvent struct {
	PodEvent *PodEvent `protobuf:"bytes,6,opt,name=pod_event,json=podEvent,proto3,oneof"`
}

func (*Task_NodeEvent) isTask_Event() {}

func (*Task_PodEvent) isTask_Event() {}

// An event that will be applied on a node
type NodeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node state that will be applied to the node.
	NodeState *NodeState `protobuf:"bytes,1,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty"`
}

func (x *NodeEvent) Reset() {
	*x = NodeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeEvent) ProtoMessage() {}

func (x *NodeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeEvent.ProtoReflect.Descriptor instead.
func (*NodeEvent) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{2}
}

func (x *NodeEvent) GetNodeState() *NodeState {
	if x != nil {
		return x.NodeState
	}
	return nil
}

// An event that will be applied on pod(s)
type PodEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the configuration_metadata_name used to determine on which pod this event applies
	ConfigurationMetadataName string `protobuf:"bytes,1,opt,name=configuration_metadata_name,json=configurationMetadataName,proto3" json:"configuration_metadata_name,omitempty"`
	// The pod state that will be applied to the pod(s) defined by `deployment`.
	PodState *PodState `protobuf:"bytes,2,opt,name=pod_state,json=podState,proto3" json:"pod_state,omitempty"`
}

func (x *PodEvent) Reset() {
	*x = PodEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodEvent) ProtoMessage() {}

func (x *PodEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodEvent.ProtoReflect.Descriptor instead.
func (*PodEvent) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{3}
}

func (x *PodEvent) GetConfigurationMetadataName() string {
	if x != nil {
		return x.ConfigurationMetadataName
	}
	return ""
}

func (x *PodEvent) GetPodState() *PodState {
	if x != nil {
		return x.PodState
	}
	return nil
}

// The node state that will be applied to the node.
type NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLifecycleState *NodeState_NodeLifecycleState `protobuf:"bytes,1,opt,name=node_lifecycle_state,json=nodeLifecycleState,proto3" json:"node_lifecycle_state,omitempty"`
	ResourceState      *NodeState_ResourceState      `protobuf:"bytes,2,opt,name=resource_state,json=resourceState,proto3" json:"resource_state,omitempty"`
	AddedLatencyState  *NodeState_AddedLatencyState  `protobuf:"bytes,3,opt,name=added_latency_state,json=addedLatencyState,proto3" json:"added_latency_state,omitempty"`
}

func (x *NodeState) Reset() {
	*x = NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState) ProtoMessage() {}

func (x *NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState.ProtoReflect.Descriptor instead.
func (*NodeState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{4}
}

func (x *NodeState) GetNodeLifecycleState() *NodeState_NodeLifecycleState {
	if x != nil {
		return x.NodeLifecycleState
	}
	return nil
}

func (x *NodeState) GetResourceState() *NodeState_ResourceState {
	if x != nil {
		return x.ResourceState
	}
	return nil
}

func (x *NodeState) GetAddedLatencyState() *NodeState_AddedLatencyState {
	if x != nil {
		return x.AddedLatencyState
	}
	return nil
}

// The pod state that will be applied a certain pod deployment
// To which deployment this state if applied depends on the `deployment` in `PodEvent`
type PodState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodLifecycleState *PodState_PodLifecycleState `protobuf:"bytes,1,opt,name=pod_lifecycle_state,json=podLifecycleState,proto3" json:"pod_lifecycle_state,omitempty"`
	// The status of a certain percentage of pods in the current deployment
	// Can be left empty to keep the status unchanged
	// If left empty, the pod_status_percentage will be ignored
	PodStatus scenario.PodStatus `protobuf:"varint,2,opt,name=pod_status,json=podStatus,proto3,enum=apate.scenario.PodStatus" json:"pod_status,omitempty"`
	// The percentage of pods in the current deployment getting the new status
	PodStatusPercentage int32 `protobuf:"varint,3,opt,name=pod_status_percentage,json=podStatusPercentage,proto3" json:"pod_status_percentage,omitempty"`
	// The starting time of this pod (see corev1.PodStatus.StartTime)
	// ISO8601 format
	// Can be left empty to keep the starting time unchanged
	PodStartTime string `protobuf:"bytes,4,opt,name=pod_start_time,json=podStartTime,proto3" json:"pod_start_time,omitempty"`
}

func (x *PodState) Reset() {
	*x = PodState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodState) ProtoMessage() {}

func (x *PodState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodState.ProtoReflect.Descriptor instead.
func (*PodState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{5}
}

func (x *PodState) GetPodLifecycleState() *PodState_PodLifecycleState {
	if x != nil {
		return x.PodLifecycleState
	}
	return nil
}

func (x *PodState) GetPodStatus() scenario.PodStatus {
	if x != nil {
		return x.PodStatus
	}
	return scenario.PodStatus_POD_PENDING
}

func (x *PodState) GetPodStatusPercentage() int32 {
	if x != nil {
		return x.PodStatusPercentage
	}
	return 0
}

func (x *PodState) GetPodStartTime() string {
	if x != nil {
		return x.PodStartTime
	}
	return ""
}

// Defines if there will be a response to certain CRUD requests from k8s
// If a field in here is set to true, the corresponding CRUD request will timeout
// The percentage fields define what percentage of requests on this node will be affected by the error
type LifecycleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatePodAction              scenario.LifecycleAction `protobuf:"varint,1,opt,name=create_pod_action,json=createPodAction,proto3,enum=apate.scenario.LifecycleAction" json:"create_pod_action,omitempty"`
	CreatePodActionPercentage    int32                    `protobuf:"varint,2,opt,name=create_pod_action_percentage,json=createPodActionPercentage,proto3" json:"create_pod_action_percentage,omitempty"`
	UpdatePodAction              scenario.LifecycleAction `protobuf:"varint,3,opt,name=update_pod_action,json=updatePodAction,proto3,enum=apate.scenario.LifecycleAction" json:"update_pod_action,omitempty"`
	UpdatePodActionPercentage    int32                    `protobuf:"varint,4,opt,name=update_pod_action_percentage,json=updatePodActionPercentage,proto3" json:"update_pod_action_percentage,omitempty"`
	DeletePodAction              scenario.LifecycleAction `protobuf:"varint,5,opt,name=delete_pod_action,json=deletePodAction,proto3,enum=apate.scenario.LifecycleAction" json:"delete_pod_action,omitempty"`
	DeletePodActionPercentage    int32                    `protobuf:"varint,6,opt,name=delete_pod_action_percentage,json=deletePodActionPercentage,proto3" json:"delete_pod_action_percentage,omitempty"`
	GetPodAction                 scenario.LifecycleAction `protobuf:"varint,7,opt,name=get_pod_action,json=getPodAction,proto3,enum=apate.scenario.LifecycleAction" json:"get_pod_action,omitempty"`
	GetPodActionPercentage       int32                    `protobuf:"varint,8,opt,name=get_pod_action_percentage,json=getPodActionPercentage,proto3" json:"get_pod_action_percentage,omitempty"`
	GetPodStatusAction           scenario.LifecycleAction `protobuf:"varint,9,opt,name=get_pod_status_action,json=getPodStatusAction,proto3,enum=apate.scenario.LifecycleAction" json:"get_pod_status_action,omitempty"`
	GetPodStatusActionPercentage int32                    `protobuf:"varint,10,opt,name=get_pod_status_action_percentage,json=getPodStatusActionPercentage,proto3" json:"get_pod_status_action_percentage,omitempty"`
}

func (x *LifecycleState) Reset() {
	*x = LifecycleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifecycleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleState) ProtoMessage() {}

func (x *LifecycleState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleState.ProtoReflect.Descriptor instead.
func (*LifecycleState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{6}
}

func (x *LifecycleState) GetCreatePodAction() scenario.LifecycleAction {
	if x != nil {
		return x.CreatePodAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *LifecycleState) GetCreatePodActionPercentage() int32 {
	if x != nil {
		return x.CreatePodActionPercentage
	}
	return 0
}

func (x *LifecycleState) GetUpdatePodAction() scenario.LifecycleAction {
	if x != nil {
		return x.UpdatePodAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *LifecycleState) GetUpdatePodActionPercentage() int32 {
	if x != nil {
		return x.UpdatePodActionPercentage
	}
	return 0
}

func (x *LifecycleState) GetDeletePodAction() scenario.LifecycleAction {
	if x != nil {
		return x.DeletePodAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *LifecycleState) GetDeletePodActionPercentage() int32 {
	if x != nil {
		return x.DeletePodActionPercentage
	}
	return 0
}

func (x *LifecycleState) GetGetPodAction() scenario.LifecycleAction {
	if x != nil {
		return x.GetPodAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *LifecycleState) GetGetPodActionPercentage() int32 {
	if x != nil {
		return x.GetPodActionPercentage
	}
	return 0
}

func (x *LifecycleState) GetGetPodStatusAction() scenario.LifecycleAction {
	if x != nil {
		return x.GetPodStatusAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *LifecycleState) GetGetPodStatusActionPercentage() int32 {
	if x != nil {
		return x.GetPodStatusActionPercentage
	}
	return 0
}

type NodeState_NodeLifecycleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleState          *LifecycleState          `protobuf:"bytes,1,opt,name=lifecycleState,proto3" json:"lifecycleState,omitempty"`
	GetPodsAction           scenario.LifecycleAction `protobuf:"varint,2,opt,name=get_pods_action,json=getPodsAction,proto3,enum=apate.scenario.LifecycleAction" json:"get_pods_action,omitempty"`
	GetPodsActionPercentage int32                    `protobuf:"varint,3,opt,name=get_pods_action_percentage,json=getPodsActionPercentage,proto3" json:"get_pods_action_percentage,omitempty"`
	PingAction              scenario.LifecycleAction `protobuf:"varint,4,opt,name=ping_action,json=pingAction,proto3,enum=apate.scenario.LifecycleAction" json:"ping_action,omitempty"`
	PingActionPercentage    int32                    `protobuf:"varint,5,opt,name=ping_action_percentage,json=pingActionPercentage,proto3" json:"ping_action_percentage,omitempty"`
}

func (x *NodeState_NodeLifecycleState) Reset() {
	*x = NodeState_NodeLifecycleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState_NodeLifecycleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState_NodeLifecycleState) ProtoMessage() {}

func (x *NodeState_NodeLifecycleState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState_NodeLifecycleState.ProtoReflect.Descriptor instead.
func (*NodeState_NodeLifecycleState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NodeState_NodeLifecycleState) GetLifecycleState() *LifecycleState {
	if x != nil {
		return x.LifecycleState
	}
	return nil
}

func (x *NodeState_NodeLifecycleState) GetGetPodsAction() scenario.LifecycleAction {
	if x != nil {
		return x.GetPodsAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *NodeState_NodeLifecycleState) GetGetPodsActionPercentage() int32 {
	if x != nil {
		return x.GetPodsActionPercentage
	}
	return 0
}

func (x *NodeState_NodeLifecycleState) GetPingAction() scenario.LifecycleAction {
	if x != nil {
		return x.PingAction
	}
	return scenario.LifecycleAction_NORMAL
}

func (x *NodeState_NodeLifecycleState) GetPingActionPercentage() int32 {
	if x != nil {
		return x.PingActionPercentage
	}
	return 0
}

// Defines the amount of resources the node has in use
// Will default to 0% for all types of possible resources (corev1.ResourceName)
type NodeState_ResourceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable the next fields
	// If not enabled, the next fields will be ignored
	EnableResourceAlteration bool `protobuf:"varint,1,opt,name=enable_resource_alteration,json=enableResourceAlteration,proto3" json:"enable_resource_alteration,omitempty"`
	// The percentage of CPU used
	CpuUsage int32 `protobuf:"varint,2,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// The percentage of memory used
	MemoryUsage int32 `protobuf:"varint,3,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	// The percentage of storage used
	StorageUsage int32 `protobuf:"varint,4,opt,name=storage_usage,json=storageUsage,proto3" json:"storage_usage,omitempty"`
	// The percentage of ephermal storage used
	EphemeralStorageUsage int32 `protobuf:"varint,5,opt,name=ephemeral_storage_usage,json=ephemeralStorageUsage,proto3" json:"ephemeral_storage_usage,omitempty"`
}

func (x *NodeState_ResourceState) Reset() {
	*x = NodeState_ResourceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState_ResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState_ResourceState) ProtoMessage() {}

func (x *NodeState_ResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState_ResourceState.ProtoReflect.Descriptor instead.
func (*NodeState_ResourceState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{4, 1}
}

func (x *NodeState_ResourceState) GetEnableResourceAlteration() bool {
	if x != nil {
		return x.EnableResourceAlteration
	}
	return false
}

func (x *NodeState_ResourceState) GetCpuUsage() int32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *NodeState_ResourceState) GetMemoryUsage() int32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *NodeState_ResourceState) GetStorageUsage() int32 {
	if x != nil {
		return x.StorageUsage
	}
	return 0
}

func (x *NodeState_ResourceState) GetEphemeralStorageUsage() int32 {
	if x != nil {
		return x.EphemeralStorageUsage
	}
	return 0
}

// Defines the amount of added network latency the node experiences
// Will default to 0 msec
type NodeState_AddedLatencyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable added latency
	// If not enabled, the next field will be ignored
	AddedLatencyEnabled bool `protobuf:"varint,1,opt,name=added_latency_enabled,json=addedLatencyEnabled,proto3" json:"added_latency_enabled,omitempty"`
	// The amount of msec of latency
	AddedLatencyMsec int32 `protobuf:"varint,2,opt,name=added_latency_msec,json=addedLatencyMsec,proto3" json:"added_latency_msec,omitempty"`
}

func (x *NodeState_AddedLatencyState) Reset() {
	*x = NodeState_AddedLatencyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState_AddedLatencyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState_AddedLatencyState) ProtoMessage() {}

func (x *NodeState_AddedLatencyState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState_AddedLatencyState.ProtoReflect.Descriptor instead.
func (*NodeState_AddedLatencyState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{4, 2}
}

func (x *NodeState_AddedLatencyState) GetAddedLatencyEnabled() bool {
	if x != nil {
		return x.AddedLatencyEnabled
	}
	return false
}

func (x *NodeState_AddedLatencyState) GetAddedLatencyMsec() int32 {
	if x != nil {
		return x.AddedLatencyMsec
	}
	return 0
}

type PodState_PodLifecycleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleState *LifecycleState `protobuf:"bytes,1,opt,name=lifecycleState,proto3" json:"lifecycleState,omitempty"`
}

func (x *PodState_PodLifecycleState) Reset() {
	*x = PodState_PodLifecycleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apatelet_scenario_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodState_PodLifecycleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodState_PodLifecycleState) ProtoMessage() {}

func (x *PodState_PodLifecycleState) ProtoReflect() protoreflect.Message {
	mi := &file_apatelet_scenario_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodState_PodLifecycleState.ProtoReflect.Descriptor instead.
func (*PodState_PodLifecycleState) Descriptor() ([]byte, []int) {
	return file_apatelet_scenario_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PodState_PodLifecycleState) GetLifecycleState() *LifecycleState {
	if x != nil {
		return x.LifecycleState
	}
	return nil
}

var File_apatelet_scenario_proto protoreflect.FileDescriptor

var file_apatelet_scenario_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x10, 0x41, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x61,
	0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xf2, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x08,
	0x50, 0x6f, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xd9, 0x07, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a,
	0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a,
	0x13, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x64, 0x64, 0x65, 0x64, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xda, 0x02, 0x0a, 0x12, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xea, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x75, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x64, 0x64, 0x65, 0x64, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x65, 0x63, 0x22, 0xd7, 0x02, 0x0a, 0x08,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x6f, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6f, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x11, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65,
	0x2e, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5b, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd8, 0x05, 0x0a, 0x0e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x61,
	0x74, 0x65, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1c, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x32, 0x57, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x4b, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x20, 0x2e,
	0x61, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x41,
	0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x2d,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x63, 0x2d,
	0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apatelet_scenario_proto_rawDescOnce sync.Once
	file_apatelet_scenario_proto_rawDescData = file_apatelet_scenario_proto_rawDesc
)

func file_apatelet_scenario_proto_rawDescGZIP() []byte {
	file_apatelet_scenario_proto_rawDescOnce.Do(func() {
		file_apatelet_scenario_proto_rawDescData = protoimpl.X.CompressGZIP(file_apatelet_scenario_proto_rawDescData)
	})
	return file_apatelet_scenario_proto_rawDescData
}

var file_apatelet_scenario_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_apatelet_scenario_proto_goTypes = []interface{}{
	(*ApateletScenario)(nil),             // 0: apate.apatelet.ApateletScenario
	(*Task)(nil),                         // 1: apate.apatelet.Task
	(*NodeEvent)(nil),                    // 2: apate.apatelet.NodeEvent
	(*PodEvent)(nil),                     // 3: apate.apatelet.PodEvent
	(*NodeState)(nil),                    // 4: apate.apatelet.NodeState
	(*PodState)(nil),                     // 5: apate.apatelet.PodState
	(*LifecycleState)(nil),               // 6: apate.apatelet.LifecycleState
	(*NodeState_NodeLifecycleState)(nil), // 7: apate.apatelet.NodeState.NodeLifecycleState
	(*NodeState_ResourceState)(nil),      // 8: apate.apatelet.NodeState.ResourceState
	(*NodeState_AddedLatencyState)(nil),  // 9: apate.apatelet.NodeState.AddedLatencyState
	(*PodState_PodLifecycleState)(nil),   // 10: apate.apatelet.PodState.PodLifecycleState
	(scenario.PodStatus)(0),              // 11: apate.scenario.PodStatus
	(scenario.LifecycleAction)(0),        // 12: apate.scenario.LifecycleAction
	(*empty.Empty)(nil),                  // 13: google.protobuf.Empty
}
var file_apatelet_scenario_proto_depIdxs = []int32{
	1,  // 0: apate.apatelet.ApateletScenario.task:type_name -> apate.apatelet.Task
	2,  // 1: apate.apatelet.Task.node_event:type_name -> apate.apatelet.NodeEvent
	3,  // 2: apate.apatelet.Task.pod_event:type_name -> apate.apatelet.PodEvent
	4,  // 3: apate.apatelet.NodeEvent.node_state:type_name -> apate.apatelet.NodeState
	5,  // 4: apate.apatelet.PodEvent.pod_state:type_name -> apate.apatelet.PodState
	7,  // 5: apate.apatelet.NodeState.node_lifecycle_state:type_name -> apate.apatelet.NodeState.NodeLifecycleState
	8,  // 6: apate.apatelet.NodeState.resource_state:type_name -> apate.apatelet.NodeState.ResourceState
	9,  // 7: apate.apatelet.NodeState.added_latency_state:type_name -> apate.apatelet.NodeState.AddedLatencyState
	10, // 8: apate.apatelet.PodState.pod_lifecycle_state:type_name -> apate.apatelet.PodState.PodLifecycleState
	11, // 9: apate.apatelet.PodState.pod_status:type_name -> apate.scenario.PodStatus
	12, // 10: apate.apatelet.LifecycleState.create_pod_action:type_name -> apate.scenario.LifecycleAction
	12, // 11: apate.apatelet.LifecycleState.update_pod_action:type_name -> apate.scenario.LifecycleAction
	12, // 12: apate.apatelet.LifecycleState.delete_pod_action:type_name -> apate.scenario.LifecycleAction
	12, // 13: apate.apatelet.LifecycleState.get_pod_action:type_name -> apate.scenario.LifecycleAction
	12, // 14: apate.apatelet.LifecycleState.get_pod_status_action:type_name -> apate.scenario.LifecycleAction
	6,  // 15: apate.apatelet.NodeState.NodeLifecycleState.lifecycleState:type_name -> apate.apatelet.LifecycleState
	12, // 16: apate.apatelet.NodeState.NodeLifecycleState.get_pods_action:type_name -> apate.scenario.LifecycleAction
	12, // 17: apate.apatelet.NodeState.NodeLifecycleState.ping_action:type_name -> apate.scenario.LifecycleAction
	6,  // 18: apate.apatelet.PodState.PodLifecycleState.lifecycleState:type_name -> apate.apatelet.LifecycleState
	0,  // 19: apate.apatelet.Scenario.startScenario:input_type -> apate.apatelet.ApateletScenario
	13, // 20: apate.apatelet.Scenario.startScenario:output_type -> google.protobuf.Empty
	20, // [20:21] is the sub-list for method output_type
	19, // [19:20] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_apatelet_scenario_proto_init() }
func file_apatelet_scenario_proto_init() {
	if File_apatelet_scenario_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apatelet_scenario_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApateletScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifecycleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState_NodeLifecycleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState_ResourceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState_AddedLatencyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apatelet_scenario_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodState_PodLifecycleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apatelet_scenario_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Task_NodeEvent)(nil),
		(*Task_PodEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apatelet_scenario_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apatelet_scenario_proto_goTypes,
		DependencyIndexes: file_apatelet_scenario_proto_depIdxs,
		MessageInfos:      file_apatelet_scenario_proto_msgTypes,
	}.Build()
	File_apatelet_scenario_proto = out.File
	file_apatelet_scenario_proto_rawDesc = nil
	file_apatelet_scenario_proto_goTypes = nil
	file_apatelet_scenario_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScenarioClient is the client API for Scenario service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScenarioClient interface {
	// Starts a scenario on the current Apatelet
	// This will be called on every Apatelet
	StartScenario(ctx context.Context, in *ApateletScenario, opts ...grpc.CallOption) (*empty.Empty, error)
}

type scenarioClient struct {
	cc grpc.ClientConnInterface
}

func NewScenarioClient(cc grpc.ClientConnInterface) ScenarioClient {
	return &scenarioClient{cc}
}

func (c *scenarioClient) StartScenario(ctx context.Context, in *ApateletScenario, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/apate.apatelet.Scenario/startScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScenarioServer is the server API for Scenario service.
type ScenarioServer interface {
	// Starts a scenario on the current Apatelet
	// This will be called on every Apatelet
	StartScenario(context.Context, *ApateletScenario) (*empty.Empty, error)
}

// UnimplementedScenarioServer can be embedded to have forward compatible implementations.
type UnimplementedScenarioServer struct {
}

func (*UnimplementedScenarioServer) StartScenario(context.Context, *ApateletScenario) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScenario not implemented")
}

func RegisterScenarioServer(s *grpc.Server, srv ScenarioServer) {
	s.RegisterService(&_Scenario_serviceDesc, srv)
}

func _Scenario_StartScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApateletScenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServer).StartScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apate.apatelet.Scenario/StartScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServer).StartScenario(ctx, req.(*ApateletScenario))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scenario_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apate.apatelet.Scenario",
	HandlerType: (*ScenarioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startScenario",
			Handler:    _Scenario_StartScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apatelet/scenario.proto",
}
