syntax = "proto3";

option go_package = "github.com/atlarge-research/opendc-emulate-kubernetes/protobuf/scenario";

import "google/protobuf/empty.proto";

package apate.scenario;

service ScenarioRegistrar {
    rpc registerScenario (Scenario) returns (google.protobuf.Empty) {}
}

message Scenario {
    repeated Task task = 1;
}

message Task {
    string name = 1;
    int32 timestamp = 2;
    repeated NodeGroup nodeGroupSet = 3;
    Event event = 4;
}

message NodeGroup {
    int32 nodeAmount = 1;
    message Node {
        int32 RAM = 1;
    };
}

/*
Node.

Required flags & their defaults:
- dont_respond_to_ping = false, changes `Ping(context.Context) error` responses

- CRUD responses, changes `PodLifecycleHandler` responses
    - dont_respond_to_create = false
    - dont_respond_to_update = false
    - dont_respond_to_delete = false
    - dont_respond_to_get = false
    - dont_respond_to_get_pods = false

- CRUD errors, changes `PodLifecycleHandler` responses
    - error_on_create = false
    - error_on_update = false
    - error_on_delete = false
    - error_on_get = false
    - error_on_get_pods = false

- Resource pressure, calls k8s API
    - enable_pressure = false
    - cpu_usage (percentage) = 0
    - ram_usage (percentage) = 0
    - storage_usage (percentage) = 0
    - ephemeral_storage_usage (percentage) = 0

- Latency, sleeps in responses
    - global_latency = false
    - global_latency_msec (msec) = 0
    - ping_latency = false
    - ping_latency_msec (msec) = 0
    - crud_latency = false
    - crud_latency_msec (msec) = 0

Flags per event:
- Node failure:
    - dont_respond_to_ping = true
    - dont_respond_to_crud = true (all of them)
    - error_on_crud = false (all of them)
    - resource_pressure = false (all of them)
    - latency = false (all of them)

- Selective failure
    - No response, but keep heartbeat:
        - dont_respond_to_ping = false
        - dont_respond_to_crud = true (all of them)
        - error_on_crud = false (all of them)
        - enable_pressure = false
        - latency = false (all of them)

    - Response, but no heartbeat:
        - dont_respond_to_ping = true
        - dont_respond_to_crud = false (all of them)
        - error_on_crud = false (all of them)
        - enable_pressure = false
        - latency = false (all of them)

    - Fail on CRUD's:
        - dont_respond_to_ping = false
        - dont_respond_to_crud = false (all of them)
        - error_on_crud = true (depending on type of CRUD)
        - enable_pressure = false
        - latency = false (all of them)

- Sudden resource pressure:
    - dont_respond_to_ping = false
    - dont_respond_to_crud = false (all of them)
    - error_on_crud = false (all of them)
    - enable_pressure = true
    - cpu_usage = 95
    - latency = false (all of them)

- Network
    - Segregation:
        - dont_respond_to_ping = true
        - dont_respond_to_crud = true (all of them)
        - error_on_crud = false (all of them)
        - resource_pressure = false (all of them)
        - latency = false (all of them)

    - Latency:
        - dont_respond_to_ping = false
        - dont_respond_to_crud = false (all of them)
        - error_on_crud = false (all of them)
        - resource_pressure = false (all of them)
        - global_latency = true (could also be ping / crud latency)
        - global_latency_msec = 100 (could also be ping / crud latency)
---
Pod.

Notes on extra requirements:
- Pod creation (extra: with preference) -> only supported at the beginning, creating pods later in the scenario will be a future feature

Required flags:
- error_on_crud = false, changes `PodLifecycleHandler` responses
    - error_on_create
    - error_on_create_percentage
    - error_on_update
    - error_on_update_percentage
    - error_on_delete
    - error_on_delete_percentage
    - error_on_get
    - error_on_get_percentage

- pod_status (enum, [PodPending, PodRunning, PodSucceeded, PodFailed, PodUnknown]) = PodRunning

- start_time (date) = original_start_time

Flags per event:
- Pod failure (e.g. creation):
    - error_on_create = true
    - error_on_create_percentage = 90
    - pod_status = unchanged (left out)
    - start_time = unchanged (left out)

- Pod status update:
    - error_on_crud = false (all of them)
    - pod_status = x
    - start_time = unchanged (left out)

- Fake start time:
    - error_on_crud = false (all of them)
    - pod_status = unchanged (left out)
    - start_time = x
*/
message Event {
    NodeState node_state = 1;
    message PodEvent {
        string deployment = 1;
        PodState pod_state = 2;
    }
}

message NodeState {
    bool dont_respond_to_ping = 1;
    message CrudResponseState {
        bool dont_respond_to_create = 1;
        bool dont_respond_to_update = 2;
        bool dont_respond_to_delete = 3;
        bool dont_respond_to_get = 4;
        bool dont_respond_to_get_pods = 5;
    }
    message CrudErrorState {
        bool error_on_create = 1;
        bool error_on_update = 2;
        bool error_on_delete = 3;
        bool error_on_get = 4;
        bool error_on_get_pods = 5;
    }
    message ResourcePressureState {
        bool enable_pressure = 1;
        int32 cpu_usage = 2;
        int32 ram_usage = 3;
        int32 storage_usage = 4;
        int32 ephemeral_storage_usage = 5;
    }
    message LatencyState {
        bool global_latency = 1;
        int32 global_latency_msec = 2;
        bool ping_latency = 3;
        int32 ping_latency_msec = 4;
        bool crud_latency = 5;
        int32 crud_latency_msec = 6;
    }
}

message PodState {
    message CrudErrorState {
        bool error_on_create = 1;
        int32 error_on_create_percentage = 2;
        bool error_on_update = 3;
        int32 error_on_update_percentage = 4;
        bool error_on_delete = 5;
        int32 error_on_delete_percentage = 6;
        bool error_on_get = 7;
        int32 error_on_get_percentage = 8;
    }
    enum PodStatus {
        POD_PENDING = 0;
        POD_RUNNING = 1;
        POD_SUCCEEDED = 2;
        POD_FAILED = 3;
        POD_UNKNOWN = 4;
    }
    PodStatus pod_status = 1;
    string start_time = 2;
}
