// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atlarge-research/opendc-emulate-kubernetes/services/apatelet/store (interfaces: Store)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	store "github.com/atlarge-research/opendc-emulate-kubernetes/services/apatelet/store"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	time "time"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddPodFlagListener mocks base method
func (m *MockStore) AddPodFlagListener(arg0 int32, arg1 func(interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPodFlagListener", arg0, arg1)
}

// AddPodFlagListener indicates an expected call of AddPodFlagListener
func (mr *MockStoreMockRecorder) AddPodFlagListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPodFlagListener", reflect.TypeOf((*MockStore)(nil).AddPodFlagListener), arg0, arg1)
}

// GetNodeFlag mocks base method
func (m *MockStore) GetNodeFlag(arg0 int32) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeFlag", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeFlag indicates an expected call of GetNodeFlag
func (mr *MockStoreMockRecorder) GetNodeFlag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeFlag", reflect.TypeOf((*MockStore)(nil).GetNodeFlag), arg0)
}

// GetPodFlag mocks base method
func (m *MockStore) GetPodFlag(arg0 *v1.Pod, arg1 int32) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodFlag", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodFlag indicates an expected call of GetPodFlag
func (mr *MockStoreMockRecorder) GetPodFlag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodFlag", reflect.TypeOf((*MockStore)(nil).GetPodFlag), arg0, arg1)
}

// PeekTask mocks base method
func (m *MockStore) PeekTask() (time.Duration, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekTask")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PeekTask indicates an expected call of PeekTask
func (mr *MockStoreMockRecorder) PeekTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekTask", reflect.TypeOf((*MockStore)(nil).PeekTask))
}

// PopTask mocks base method
func (m *MockStore) PopTask() (*store.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopTask")
	ret0, _ := ret[0].(*store.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopTask indicates an expected call of PopTask
func (mr *MockStoreMockRecorder) PopTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopTask", reflect.TypeOf((*MockStore)(nil).PopTask))
}

// RemovePodTasks mocks base method
func (m *MockStore) RemovePodTasks(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePodTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePodTasks indicates an expected call of RemovePodTasks
func (mr *MockStoreMockRecorder) RemovePodTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePodTasks", reflect.TypeOf((*MockStore)(nil).RemovePodTasks), arg0)
}

// SetNodeFlags mocks base method
func (m *MockStore) SetNodeFlags(arg0 store.Flags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNodeFlags", arg0)
}

// SetNodeFlags indicates an expected call of SetNodeFlags
func (mr *MockStoreMockRecorder) SetNodeFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeFlags", reflect.TypeOf((*MockStore)(nil).SetNodeFlags), arg0)
}

// SetNodeTasks mocks base method
func (m *MockStore) SetNodeTasks(arg0 []*store.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeTasks indicates an expected call of SetNodeTasks
func (mr *MockStoreMockRecorder) SetNodeTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeTasks", reflect.TypeOf((*MockStore)(nil).SetNodeTasks), arg0)
}

// SetPodFlags mocks base method
func (m *MockStore) SetPodFlags(arg0 string, arg1 store.Flags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPodFlags", arg0, arg1)
}

// SetPodFlags indicates an expected call of SetPodFlags
func (mr *MockStoreMockRecorder) SetPodFlags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPodFlags", reflect.TypeOf((*MockStore)(nil).SetPodFlags), arg0, arg1)
}

// SetPodTasks mocks base method
func (m *MockStore) SetPodTasks(arg0 string, arg1 []*store.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPodTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPodTasks indicates an expected call of SetPodTasks
func (mr *MockStoreMockRecorder) SetPodTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPodTasks", reflect.TypeOf((*MockStore)(nil).SetPodTasks), arg0, arg1)
}

// SetPodTimeFlags mocks base method
func (m *MockStore) SetPodTimeFlags(arg0 string, arg1 []*store.TimeFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPodTimeFlags", arg0, arg1)
}

// SetPodTimeFlags indicates an expected call of SetPodTimeFlags
func (mr *MockStoreMockRecorder) SetPodTimeFlags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPodTimeFlags", reflect.TypeOf((*MockStore)(nil).SetPodTimeFlags), arg0, arg1)
}
