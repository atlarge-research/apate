// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atlarge-research/opendc-emulate-kubernetes/services/apatelet/provider/podmanager (interfaces: PodManager)

// Package mock_podmanager is a generated GoMock package.
package mock_podmanager

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
)

// MockPodManager is a mock of PodManager interface
type MockPodManager struct {
	ctrl     *gomock.Controller
	recorder *MockPodManagerMockRecorder
}

// MockPodManagerMockRecorder is the mock recorder for MockPodManager
type MockPodManagerMockRecorder struct {
	mock *MockPodManager
}

// NewMockPodManager creates a new mock instance
func NewMockPodManager(ctrl *gomock.Controller) *MockPodManager {
	mock := &MockPodManager{ctrl: ctrl}
	mock.recorder = &MockPodManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodManager) EXPECT() *MockPodManagerMockRecorder {
	return m.recorder
}

// AddPod mocks base method
func (m *MockPodManager) AddPod(arg0 v1.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPod", arg0)
}

// AddPod indicates an expected call of AddPod
func (mr *MockPodManagerMockRecorder) AddPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPod", reflect.TypeOf((*MockPodManager)(nil).AddPod), arg0)
}

// DeletePod mocks base method
func (m *MockPodManager) DeletePod(arg0 *v1.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePod", arg0)
}

// DeletePod indicates an expected call of DeletePod
func (mr *MockPodManagerMockRecorder) DeletePod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockPodManager)(nil).DeletePod), arg0)
}

// GetAllPods mocks base method
func (m *MockPodManager) GetAllPods() []*v1.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPods")
	ret0, _ := ret[0].([]*v1.Pod)
	return ret0
}

// GetAllPods indicates an expected call of GetAllPods
func (mr *MockPodManagerMockRecorder) GetAllPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPods", reflect.TypeOf((*MockPodManager)(nil).GetAllPods))
}

// GetPodByName mocks base method
func (m *MockPodManager) GetPodByName(arg0, arg1 string) (*v1.Pod, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByName", arg0, arg1)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPodByName indicates an expected call of GetPodByName
func (mr *MockPodManagerMockRecorder) GetPodByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByName", reflect.TypeOf((*MockPodManager)(nil).GetPodByName), arg0, arg1)
}

// GetPodByUID mocks base method
func (m *MockPodManager) GetPodByUID(arg0 types.UID) (*v1.Pod, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByUID", arg0)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPodByUID indicates an expected call of GetPodByUID
func (mr *MockPodManagerMockRecorder) GetPodByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByUID", reflect.TypeOf((*MockPodManager)(nil).GetPodByUID), arg0)
}
